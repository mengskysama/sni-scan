package main

import (
	"flag"
	"io/ioutil"
	"net"
	"net/http"
	"strconv"
	"strings"
	"time"

	log "github.com/thinkboy/log4go"
)

var payload []byte

func init() {
	payload = []byte{
		0x16, 0x03, 0x01, 0x01, 0x05, 0x01, 0x00, 0x01, 0x01, 0x03, 0x03, 0x58, 0x77, 0x97, 0xcf, 0x96,
		0x6a, 0x2e, 0x84, 0x2f, 0x1c, 0x07, 0xf9, 0xda, 0x3b, 0x24, 0xae, 0xe2, 0x48, 0x38, 0x98, 0xbe,
		0xe5, 0x58, 0x92, 0xc9, 0xfb, 0x8b, 0x24, 0x08, 0xff, 0x46, 0xe7, 0x20, 0x12, 0x47, 0x1a, 0xc8,
		0x88, 0x73, 0xdb, 0x4a, 0x5e, 0xc6, 0x02, 0x57, 0x68, 0x46, 0xf6, 0xae, 0x66, 0xbd, 0x2b, 0x70,
		0x18, 0x67, 0x6c, 0x72, 0x3e, 0x13, 0xfe, 0xcf, 0x2e, 0xc2, 0x73, 0x98, 0x00, 0x38, 0xc0, 0x2c,
		0xc0, 0x30, 0x00, 0x9f, 0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa, 0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e,
		0xc0, 0x24, 0xc0, 0x28, 0x00, 0x6b, 0xc0, 0x23, 0xc0, 0x27, 0x00, 0x67, 0xc0, 0x0a, 0xc0, 0x14,
		0x00, 0x39, 0xc0, 0x09, 0xc0, 0x13, 0x00, 0x33, 0x00, 0x9d, 0x00, 0x9c, 0x00, 0x3d, 0x00, 0x3c,
		0x00, 0x35, 0x00, 0x2f, 0x00, 0xff, 0x01, 0x00, 0x00, 0x80, 0x00, 0x23, 0x00, 0x24, 0x80, 0x33,
		0x4d, 0xc8, 0x7a, 0x9f, 0x36, 0xc2, 0xce, 0xa1, 0xaf, 0xf9, 0x18, 0x05, 0x3d, 0x7a, 0x04, 0xae,
		0x16, 0xd1, 0x46, 0x71, 0x8d, 0x2f, 0x10, 0xfb, 0xa4, 0x70, 0xa0, 0xb0, 0x54, 0x68, 0xdf, 0xc3,
		0xa4, 0x2c, 0x00, 0x00, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x0d, 0x77, 0x77, 0x77, 0x2e, 0x62,
		0x61, 0x69, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x0b, 0x00, 0x04, 0x03, 0x01, 0x00, 0x02,
		0x00, 0x0a, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x19, 0x00, 0x18, 0x00, 0x0d,
		0x00, 0x20, 0x00, 0x1e, 0x06, 0x01, 0x06, 0x02, 0x06, 0x03, 0x05, 0x01, 0x05, 0x02, 0x05, 0x03,
		0x04, 0x01, 0x04, 0x02, 0x04, 0x03, 0x03, 0x01, 0x03, 0x02, 0x03, 0x03, 0x02, 0x01, 0x02, 0x02,
		0x02, 0x03, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00}
}

func inetAton(ip string) int64 {
	bits := strings.Split(ip, ".")
log.Debug("%s", bits)
	b0, _ := strconv.Atoi(bits[0])
	b1, _ := strconv.Atoi(bits[1])
	b2, _ := strconv.Atoi(bits[2])
	b3, _ := strconv.Atoi(bits[3])

	var sum int64

	sum += int64(b0) << 24
	sum += int64(b1) << 16
	sum += int64(b2) << 8
	sum += int64(b3)

	return sum
}

func inetNtoa(ip int64) net.IP {
	var bytes [4]byte
	bytes[0] = byte(ip & 0xFF)
	bytes[1] = byte((ip >> 8) & 0xFF)
	bytes[2] = byte((ip >> 16) & 0xFF)
	bytes[3] = byte((ip >> 24) & 0xFF)
	return net.IPv4(bytes[3], bytes[2], bytes[1], bytes[0])
}

func Test(ip, target string) {
	conn, err := net.DialTimeout("tcp", ip+":443", time.Second*3)
	if err != nil {
		return
	}
	defer conn.Close()
	conn.Write(payload)
	buf := make([]byte, 1024)
	conn.Read(buf)
	if len(buf) < 512 {
		return
	}

	req, _ := http.NewRequest("GET", target, nil)
	client := &http.Client{
		Transport: &http.Transport{
			//TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
			Dial: func(netw, addr string) (net.Conn, error) {
				conn, err := net.Dial("tcp", ip+":443")
				if err != nil {
					return nil, err
				}
				deadline := time.Now().Add(5 * time.Second)
				conn.SetDeadline(deadline)
				return conn, nil
			},
		},
	}
	req.Header.Set("User-Agent", "Mozilla/5.0")
	_, err = client.Do(req)
	if err != nil {
		return
	}
	//stdout := os.Stdout
	//io.Copy(stdout, res.Body)
	if err != nil {
		return
	}
	log.Debug("find " + ip)
	return
}

func main() {
	ipFile := flag.String("f", "cn.txt", "ip list")
	delay := flag.Int64("d", 1500, "each ip delay time")
	target := flag.String("t", "https://www.baidu.com", "test target")
	flag.Parse()
	filedata, _ := ioutil.ReadFile(*ipFile)
	perfixs := strings.Split(string(filedata), "\n")
	for _, perfix := range perfixs {
                if perfix == "" {
			break
		}
		// log.Debug("current prefix %s", perfix)
		tmp := strings.Split(perfix, "/")
		delayTime := time.Microsecond * time.Duration(*delay)
		istartTarget := inetAton(tmp[0])
		v, _ := strconv.ParseInt(tmp[1], 10, 64)
		iendTarget := istartTarget + int64(1<<uint(32-v)) - 1
		for istartTarget <= iendTarget {
			ip := inetNtoa(istartTarget).String()
			// log.Debug("scan %s %s", perfix, ip)
			if strings.HasSuffix(ip, ".1") {
				log.Debug("scan %s %s", perfix, ip)
			}
			go Test(ip, *target)
			time.Sleep(delayTime)
			istartTarget++
		}
	}
	time.Sleep(5 * time.Second)
}
